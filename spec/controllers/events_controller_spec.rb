require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe EventsController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # Event. As you add validations to Event, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      "name":"test_name",
      "description":"test description",
      "start":"2015-10-17",
      "end":"2015-10-27",
      "number_of_days":10,
      "location":"location test",
      "published":true,
    }
  }
  let(:incomplete_attributes) {
    attrs = valid_attributes.dup
    attrs.delete(:name)
    attrs.delete(:end)
    attrs.delete(:number_of_days)
    attrs.delete(:name)
    attrs[:published] = false
    attrs
  }
  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # EventsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all events as @events" do
      event = Event.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:events)).to eq([event])
    end
  end

  describe "GET #show" do
    it "assigns the requested event as @event" do
      event = Event.create! valid_attributes
      get :show, {:id => event.to_param}, valid_session
      event_json = JSON.parse(response.body)
      event.reload
      expect(event_json).to eq({
        "id"=>event.id,
        "name"=>"test_name",
        "description"=>"<p>test description</p>",
        "start"=>"2015-10-17",
        "end"=>"2015-10-27",
        "number_of_days"=>10,
        "location"=>"location test",
        "published"=>true,
        "created_at"=>event.created_at.iso8601,
        "updated_at"=>event.updated_at.iso8601

      })
    end
  end

  describe "POST #create" do

    shared_examples "publish event with missing field" do |fields |
      before do
        fields = [fields].flatten
        @attrs = valid_attributes
        fields.each do |f|
          @attrs.delete(f)
        end
      end
    end

    context "all params with only start date missing and published" do
      it_behaves_like "publish event with missing field", :start do
        it "should create field start and publish" do
          post :create, {event:@attrs}, valid_session
          expect(response.status).to eq(201)
          event = assigns(:event)
          expect(event.start).to eq(Date.parse(@attrs[:end]) - @attrs[:number_of_days])
          expect(event.published).to be
        end
      end
    end

    context "all params with only start date missing and published" do
      it_behaves_like "publish event with missing field", :end do
        it "should create field end and publish" do
          post :create, {event:@attrs}, valid_session
          expect(response.status).to eq(201)
          event = assigns(:event)
          expect(event.end).to eq(Date.parse(@attrs[:start]) + @attrs[:number_of_days])
          expect(event.published).to be
        end
      end
    end

    context "all params with only start number_of_days missing and published" do
      it_behaves_like "publish event with missing field", :number_of_days do
        it "should create field end and publish" do
          post :create, {event:@attrs}, valid_session
          expect(response.status).to eq(201)
          event = assigns(:event)
          expect(event.number_of_days).to eq((Date.parse(@attrs[:end]) - Date.parse(@attrs[:start])).to_i)
          expect(event.published).to be
        end
      end
    end

   context "all date fields missing and published" do
     it_behaves_like "publish event with missing field", [:start,:number_of_days ,:end] do
        it "should return status 201" do
          @attrs[:published] = false
          post :create, {event:@attrs}, valid_session
          expect(response.status).to eq(201)
        end
      end
    end

   context "all date fields missing and not published" do
     it_behaves_like "publish event with missing field", [:start, :number_of_days, :end] do
        it "should return status 201" do
          @attrs[:published] = false
          post :create, {event:@attrs}, valid_session
          expect(response.status).to eq(201)
        end
      end
    end
   context "all params with only start number_of_days missing and published" do
     it_behaves_like "publish event with missing field", [:start, :end] do
        it "should return status 422" do
          post :create, {event:@attrs}, valid_session
          expect(response.status).to eq(422)
        end
      end
    end

   context "all params with only start = end" do
     it_behaves_like "publish event with missing field", [] do
        it "should return status 201" do

          @attrs[:end] = Date.today
          @attrs[:start] = Date.today
          @attrs[:number_of_days] = 0
         post(:create, format: :json, :event => @attrs)
          expect(response.status).to eq(201)
        end
      end
    end

   context " start > end" do
     it_behaves_like "publish event with missing field", [] do
        it "should return status 422" do

          @attrs[:end] = Date.today
          @attrs[:start] = Date.today + 1.day
          post :create, {event:@attrs}, valid_session
          expect(response.status).to eq(422)
        end
      end
    end

   context " number_of_days< 0 " do
     it_behaves_like "publish event with missing field", [:start] do
        it "should return status 422" do

          @attrs[:number_of_days] = -5
          post :create, {event:@attrs}, valid_session
          expect(response.status).to eq(422)
        end
      end
    end

   context "Valus of start end and number_of_days are not consistent" do
     it_behaves_like "publish event with missing field", [:start] do
        it "should return status 422" do

          @attrs[:number_of_days] = 10
          @attrs[:start] = Date.today
          @attrs[:end] = Date.today + 3
          post :create, {event:@attrs}, valid_session
          expect(response.status).to eq(422)
        end
      end
    end

  end

  describe "PUT #update" do
    context "with incomplete params" do
      it "updates with all params  and publish the requested event" do
        event = Event.create! incomplete_attributes
        put :update, {:id => event.to_param, :event => valid_attributes}, valid_session
        event.reload
        expect(response.status).to eq(204)
        expect(event.published).to be
        expect(event.start).to eq(Date.parse(valid_attributes[:start]))
        expect(event.end).to eq(Date.parse(valid_attributes[:end]))
        expect(event.name).to eq(valid_attributes[:name])
      end

      it "fails to publish" do
        event = Event.create! incomplete_attributes
        incomplete_attributes[:published] = true
        put :update, {:id => event.to_param, :event => incomplete_attributes}, valid_session
        expect(response.status).to eq(422)
      end

    end

  end

  describe "DELETE #destroy" do
    it "destroys the requested event" do
      event = Event.create! valid_attributes
      expect {
        delete :destroy, {:id => event.to_param}, valid_session
      }.to change{event.reload.deleted}.from(false).to(true)
    end

  end

end
